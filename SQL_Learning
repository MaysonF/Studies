//SQL Learnin'
//Using PostgreSQL
--------------------------------------------------------------------------------------------------------------------------------------
SQL SELECT Statements
--------------------------------------------------------------------------------------------------------------------------------------
SELECT * FROM (table)
    Select all rows and columns from table (table)
    
SELECT c1, c2 FROM (table)
    Select column1, column2 and all rows from table (table)
    
SELECT c1, c2 FROM (table) WHERE (conditions) ORDER BY c1 ASC, c2 DESC
    Select columns c1, c2 with where conditions and from table (table) order results by column1 ascending and column2 descending
    
SELECT DISTINCT c1, c2 FROM (table)
    Select distinct rows by column1 and column2 from table (table)
    
SELECT c1, aggregate(expr) FROM (table) GROUP BY c1
    Select column1 and use aggregate function on expression (expr) group columns by column1
   
SELECT c1, aggregate(expr) AS c2 FROM (table) GROUP BY c1 HAVING c2 > v
    Select column1 and column2 alias of the result of the aggregate function on expr. filter group of records with column2 > value v
--------------------------------------------------------------------------------------------------------------------------------------
SQL UPDATE table statements
--------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO (table)(c1, c2, c3,....) VALUES (v1, v2, v3,....)
    Insert data into table (table)
  
INSERT INTO (table)(c1, c2, c3,....) SELECT (c1, c2, c3,....) FROM (table2) where (conditions)
    Insert data from (table2) into (table)
    
UPDATE (table) SET c1 = v1, c2 = v2, c3 = v3,... where (conditions)
    Update data in table (table)
   
DELETE FROM (table) WHERE (conditions)
    Delete records from table (table) based on where (conditions)
    
TRUNCATE TABLE (table)
    Drop table (table) and re-create it, all data is lost
--------------------------------------------------------------------------------------------------------------------------------------
SQL TABLE statements
--------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE (table)(c1 datatype(length) c2 datatype(length) PRIMARY KEY(c1))
    Create table (table) with primary key is column1
  
DROP TABLE (table)
    Remove table (table) from database
    
ALTER TABLE (table) ADD COLUMN c1 datatype(length)
    Add column1 to table (table)
    
ALTER TABLE (table) DROP COLUMN c1
    Drop column1 from table (table)
--------------------------------------------------------------------------------------------------------------------------------------
SQL JOIN Statements
--------------------------------------------------------------------------------------------------------------------------------------
SELECT * FROM tb11 INNER JOIN tb12 ON join-conditions
    Inner join table (table1) with (table2) based on join-conditions
    
SELECT * FROM tbl1 LEFT JOIN tbl2 ON join-conditions
    Left join table (table1) with (table2) based on join-conditions
  
SELECT * FROM tbl1 RIGHT JOIN tbl2 ON join-conditions
    Right join table (table1) with (table2) based on join-conditions
   
SELECT * FROM tbl1 RIGHT JOIN tbl2 ON join-conditions
    Full outer join table tbl1 with tbl2 based on join-conditions
--------------------------------------------------------------------------------------------------------------------------------------
Notes
--------------------------------------------------------------------------------------------------------------------------------------
COLUMN v    COLUMN v 
--------------------- \
Rows ->  |             \
---------------------   \
Rows ->  |               TABLE
---------------------   /
Rows ->  |             /
--------------------- /


Alias = Alternative name for column or result

AS = alias gets assigned at the very end of data query 

INNER JOIN = Allows us to combine multiple tables together
        >An INNER JOIN will result with the set of records that match in both tables
        >Venn Diagram: Where table A and table B have similarities; overlapping
        
OUTER JOIN = Allow us to specify how to deal with values only present in one table
        >Grabs everything from table A and table B; symmetrical 
        >with WHERE: to get rows unique to either tables; exact opposite from inner joins
           ~Venn Diagram: Middle similarities is missing; unique to either table only

LEFT OUTER JOIN = In the left table, if no match with the right table, those results are null
        >Order matters! Either exclusive to left table, or there is a match with right table
        >Left table has everything selected; if there is nothing in common from right table, value will return null
        >Conditional will find values only in left table, excluding matching values from right table and right table values
        >Example: SELECT film.film_id, film.title, inventory_id FROM film
                    LEFT OUTER JOIN inventory
                        ON inventory.film_id = film.film_id
        
RIGHT OUTER JOIN = In the right table, if no match with the left table, those results are null
        >Order matters! Either exclusive to right table, or there is a match with left table
        >Right table has everything selected; if there is nothing in common from left table, value will return null
        >Conditional will find values only in right table, excluding matching values from left table and left table values
        >Example: SELECT film.film_id, title, inventory_id, store_id FROM film
                    RIGHT JOIN inventory
                        ON inventory.film_id = film.film_id

UNION = Used to combine the result-set of two or more SELECT statements 
        >Directly concatenate two results together, essentially "pasting" them together
        >Must have same column names to complete action
--------------------------------------------------------------------------------------------------------------------------------------
Advanced SQL Commands
--------------------------------------------------------------------------------------------------------------------------------------
Timestamps =
        >TIME - Returns only time
        >DATE - Returns only date
        >TIMESTAMP - Returns date and time
        >TIMESTAMPTZ - Returns date,time and timezone
        >SHOW TIMEZONE - Returns computers timezone (ex: America/New_York)
        >SELECT NOW - Returns timestamp with timezone (ex: 2021-12-11 21:26:36.974154-05)
        >SELECT TIMEOFDAY - Returns timestamp with timezone in string format. (ex: Sat Dec 11 21:22:11.714687 2021 EST)
        >SELECT CURRENT_TIME - Returns current time with time zone (ex: 21:25:43.593543-05:00)
        >SELECT CURRENT_DATE - Returns current date (ex: 2021-12-11)
        >SHOW ALL - Returns display current settings

Extracts = 
        >Extract() = allows you to extract or obtain a sub-component of a data value
            ~YEAR, MONTH, DAY, WEEK, QUARTER
        >Example: SELECT EXTRACT(YEAR FROM payment_date) AS year FROM payment
        >Example: SELECT AGE(payment_date) FROM payment
        >Example: TO_CHAR(date_col, 'mm-dd-yyyy') 
            ~(useful for timestamp formatting; converting data types to text)
            ~Many different formatting options. Search online for all options
                o: https://www.postgresql.org/docs/12/functions-formatting.html
            ~American format: mm-dd-yyyy, European format: dd-mm-yyyy
        >PostgreSQL considers Sunday start of a week (indexed at 0)
        >DOW keyword = DayOfWeek

Challenge Tasks:
    > 1. SELECT DISTINCT(TO_CHAR(payment_date, 'MONTH')) FROM payment
    > 2. SELECT (*) FROM payment WHERE EXTRACT(DOW FROM payment_date) = 1;

--------------------------------------------------------------------------------------------------------------------------------------
Mathematical Functions and Operators
--------------------------------------------------------------------------------------------------------------------------------------
//Look up Mathematical Functions and Operators PostgreSQL on google for full list

Examples:
        >SELECT rental_rate/replacement_cost FROM FILM
        >SELECT ROUND(rental_rate/replacement_cost,2) FROM FILM
        >SELECT ROUND(rental_rate/replacement_cost,2) * 100 FROM FILM
        >SELECT ROUND(rental_rate/replacement_cost,4) * 100 FROM FILM
        >SELECT ROUND(rental_rate/replacement_cost,4) * 100 AS Percent_Cost FROM FILM
        >SELECT 0.1 * replacement_cost AS deposit FROM FILM

--------------------------------------------------------------------------------------------------------------------------------------
String Functions and Operators
--------------------------------------------------------------------------------------------------------------------------------------
//Loop up String Functions and Operators PostgreSQL on google for full list

Examples:
        >SELECT LENGTH(first_name) FROM customer
        >SELECT first_name || last_name FROM customer
        >SELECT first_name ||' '|| last_name FROM customer
        >SELECT first_name ||' '|| last_name AS name FROM customer
        >SELECT upper(first_name) ||' '|| upper(last_name) AS name FROM customer
        >SELECT first_name || last_name || '@gmail.com' FROM customer
        >SELECT left(first_name, 1) || last_name || '@gmail.com' FROM customer
        >SELECT LOWER(left(first_name, 1)) || LOWER(last_name) || '@gmail.com' FROM customer
        >SELECT LOWER(left(first_name, 1)) || LOWER(last_name) || '@gmail.com' AS custom_email FROM customer
        
--------------------------------------------------------------------------------------------------------------------------------------
SubQuery
--------------------------------------------------------------------------------------------------------------------------------------
//Performing a query on the result of another query. TWO select statements. 

Examples: 
        >Typical Syntax:
            ~ SELECT column_name
            ~ FROM table_name
            ~ WHERE EXISTS
            ~ (SELECT column_name FROM 
            ~ (table_name WHERE condition);
        >SELECT student,grade FROM test_scores WHERE grade > (SELECT AVG(grade) FROM test_scores)
        >SELECT student, grade FROM test_scores WHERE student IN (SELECT student FROM honor_roll_table)
        >SELECT title, rental_rate FROM film WHERE rental_rate > (SELECT AVG(rental_rate) FROM FILM)
        >SELECT film_id, title 
            FROM film 
            WHERE film_id IN
            (SELECT inventory.film_id
            FROM rental
            INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
            WHERE return_date BETWEEN '2005-05-29' AND '2005-05-30')
            ORDER BY film_id
        >SELECT first_name, last_name FROM customer AS C 
            WHERE EXISTS
            (SELECT * FROM payment as p WHERE p.customer_id = c.customer_id and amount > 11)
        >SELECT first_name, last_name FROM customer AS C 
            WHERE NOT EXISTS
            (SELECT * FROM payment as p WHERE p.customer_id = c.customer_id and amount > 11)

--------------------------------------------------------------------------------------------------------------------------------------
Self-Join
--------------------------------------------------------------------------------------------------------------------------------------
//When a table is joined to itself.
//Useful for comparing values in a column of rows within the same table.
//Two copies of the same table.
//Looks same as standard join with same syntax
//Use alias! 

Examples:
        >Syntax:
            SELECT tableA.col, tableB.col
            FROM table AS tableA
            JOIN table AS tableB ON
            tableA.some_col = tableB.other_col
        >SELECT f1.title , f2.title, f1.length
            FROM film AS f1 
            INNER JOIN film AS f2 ON 
            f1.film_id != f2.film_id
            AND f1.length = f2.length

















